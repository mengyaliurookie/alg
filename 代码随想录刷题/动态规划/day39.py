
# 198.打家劫舍
topic="""
你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。

给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。

 

示例 1：

输入：[1,2,3,1]
输出：4
解释：偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。
     偷窃到的最高金额 = 1 + 3 = 4 。
示例 2：

输入：[2,7,9,3,1]
输出：12
解释：偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。
     偷窃到的最高金额 = 2 + 9 + 1 = 12 。
"""

class Solution:
    def rob(self, nums: List[int]) -> int:
        # 有两个子问题，当偷这个的时候，那么下一家就不能偷了，当不偷这一家的时候，下一家是可以偷的
        n=len(nums)
        @cache
        def dfs(i):
            if i>=n:
                return 0
            # 偷
            left=dfs(i+2)+nums[i]
            right=dfs(i+1)
            return max(left,right)
        return dfs(0)

class Solution:
    def rob(self, nums: List[int]) -> int:
        # 有两个子问题，当偷这个的时候，那么下一家就不能偷了，当不偷这一家的时候，下一家是可以偷的
        n=len(nums)
        dp=[0]*(n+1)
        dp[1]=nums[0]
        for i in range(1,n+1):
            # print(i)
            if i>=2:
                dp[i]=max(dp[i-2]+nums[i-1],dp[i-1])
        return dp[n]
        # @cache
        # def dfs(i):
        #     if i>=n:
        #         return 0
        #     # 偷
        #     left=dfs(i+2)+nums[i]
        #     right=dfs(i+1)
        #     return max(left,right)
        # return dfs(0)


# 213.打家劫舍II
topic="""
你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都 围成一圈 ，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警 。

给定一个代表每个房屋存放金额的非负整数数组，计算你 在不触动警报装置的情况下 ，今晚能够偷窃到的最高金额。

 

示例 1：

输入：nums = [2,3,2]
输出：3
解释：你不能先偷窃 1 号房屋（金额 = 2），然后偷窃 3 号房屋（金额 = 2）, 因为他们是相邻的。
示例 2：

输入：nums = [1,2,3,1]
输出：4
解释：你可以先偷窃 1 号房屋（金额 = 1），然后偷窃 3 号房屋（金额 = 3）。
     偷窃到的最高金额 = 1 + 3 = 4 。
示例 3：

输入：nums = [1,2,3]
输出：3
"""





